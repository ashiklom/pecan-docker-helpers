version: "3.4"

services:

  # webserver to handle all traffic. This can use let's encrypt to generate a SSL cert.
  traefik:
    image: traefik:latest
    command:
      - --loglevel=INFO
      - --api
      # Entrypoints
      - --defaultentrypoints=https,http
      - --entryPoints=Name:http Address::${TRAEFIK_HTTP_PORT:-8000} ${TRAEFIK_HTTP_REDIRECT:-""}
      - --entryPoints=Name:https Address::${TRAEFIK_HTTPS_PORT:-8443} ${TRAEFIK_HTTPS_OPTIONS:-TLS}
      # Configuration for acme (https://letsencrypt.org/)
      - --acme=${TRAEFIK_ACME_ENABLE:-false}
      #- --acme.caserver=https://acme-staging-v02.api.letsencrypt.org/directory
      - --acme.email=${TRAEFIK_ACME_EMAIL:-""}
      - --acme.entrypoint=https
      - --acme.onhostrule=true
      - --acme.storage=/config/acme.json
      - --acme.httpchallenge.entrypoint=http
      - --acme.storage=/config/acme.json
      - --acme.acmelogging=true
      # DOCKER
      - --docker=true
      - --docker.endpoint=unix:///var/run/docker.sock
      - --docker.exposedbydefault=false
      - --docker.watch=true
    restart: unless-stopped
    networks:
      - pecan
    ports:
      - "${TRAEFIK_HTTP_PORT-8000}:${TRAEFIK_HTTP_PORT:-8000}"
      - "${TRAEFIK_HTTPS_PORT-8443}:${TRAEFIK_HTTPS_PORT:-8443}"
    labels:
      - "traefik.enable=true"
      - "traefik.backend=traefik"
      - "traefik.port=8080"
      - "traefik.frontend.rule=${TRAEFIK_FRONTEND_RULE:-}PathPrefixStrip: /traefik"
      - "traefik.website.frontend.whiteList.sourceRange=${TRAEFIK_IPFILTER:-172.16.0.0/12}"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - traefik:/config
    deploy:
      placement:
        constraints:
          - node.role == manager

  # Allow to see all docker containers running, restart and see log files.
  portainer:
    image: portainer/portainer:latest
    command:
      - --admin-password=${PORTAINER_PASSWORD:-}
      - --host=unix:///var/run/docker.sock
    restart: unless-stopped
    networks:
      - pecan
    labels:
      - "traefik.enable=true"
      - "traefik.backend=portainer"
      - "traefik.frontend.rule=${TRAEFIK_FRONTEND_RULE:-}PathPrefixStrip: /portainer"
      - "traefik.website.frontend.whiteList.sourceRange=${TRAEFIK_IPFILTER:-172.16.0.0/12}"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer:/data
    deploy:
      placement:
        constraints:
          - node.role == manager

  # ----------------------------------------------------------------------
  # Access to the files generated and used by PEcAn, both through a
  # web interface (minio) as well using the thredds server.
  # ----------------------------------------------------------------------

  # webserver to handle access to data
  minio:
    image: minio/minio:latest
    command: server /data
    restart: unless-stopped
    networks:
      - pecan
    environment:
      - MINIO_ACCESS_KEY=${MINIO_ACCESS_KEY:-carya}
      - MINIO_SECRET_KEY=${MINIO_SECRET_KEY:-illinois}
    labels:
      - "traefik.enable=true"
      - "traefik.backend=minio"
      - "traefik.port=9000"
      - "traefik.frontend.rule=${TRAEFIK_FRONTEND_RULE:-}PathPrefix:/minio/"
    volumes:
      - type: volume
        source: pecan
        target: /data
        volume:
          nocopy: true
    deploy:
      placement:
        constraints:
          - node.role == manager

  # THREDDS data server
  thredds:
    image: 172.20.234.6:5000/pecan/thredds:${PECAN_VERSION:-latest}
    restart: unless-stopped
    networks:
      - pecan
    volumes:
      - type: volume
        source: pecan
        target: /data
        volume:
          nocopy: true
    labels:
      - "traefik.enable=true"
      - "traefik.port=8080"
      - "traefik.frontend.rule=${TRAEFIK_FRONTEND_RULE:-}PathPrefix:/thredds"
      - "traefik.backend=thredds"
    deploy:
      placement:
        constraints:
          - node.role == manager

  # ----------------------------------------------------------------------
  # Job management system. Jobs are distributed through the message
  # system. PEcAn uses this to distribute the work/load across multiple
  # containers.
  # ----------------------------------------------------------------------

  # rabbitmq to connect to extractors
  rabbitmq:
    image: rabbitmq:management
    restart: unless-stopped
    networks:
      - pecan
    environment:
      - RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS=-rabbitmq_management path_prefix "/rabbitmq"
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_DEFAULT_USER:-guest}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_DEFAULT_PASS:-guest}
    labels:
      - "traefik.enable=true"
      - "traefik.backend=rabbitmq"
      - "traefik.port=15672"
      - "traefik.frontend.rule=${TRAEFIK_FRONTEND_RULE:-}PathPrefix:/rabbitmq"
      - "traefik.website.frontend.whiteList.sourceRange=${TRAEFIK_IPFILTER:-172.16.0.0/12}"
    volumes:
      - rabbitmq:/var/lib/rabbitmq
    deploy:
      placement:
        constraints:
          - node.role == manager

  # ----------------------------------------------------------------------
  # Database to hold the data from PEcAn and BETY.
  # ----------------------------------------------------------------------

  # postgresql + postgis to hold all the data
  postgres:
    image: mdillon/postgis:9.5
    restart: unless-stopped
    networks:
      - pecan
    volumes:
      - postgres:/var/lib/postgresql/data
    deploy:
      placement:
        constraints:
          - node.role == manager

  # ----------------------------------------------------------------------
  # BETY rails frontend to the database
  # ----------------------------------------------------------------------
  bety:
    image: 172.20.234.6:5000/pecan/bety:${BETY_VERSION:-latest}
    restart: unless-stopped
    networks:
      - pecan
    environment:
      - UNICORN_WORKER_PROCESSES=1
      - SECRET_KEY_BASE=${BETY_SECRET_KEY:-notasecret}
      - RAILS_RELATIVE_URL_ROOT=/bety
      - LOCAL_SERVER=${BETY_LOCAL_SERVER:-99}
    depends_on:
      - postgres
    labels:
      - "traefik.enable=true"
      - "traefik.frontend.rule=${TRAEFIK_FRONTEND_RULE:-}PathPrefix:/bety/"
      - "traefik.backend=bety"
    deploy:
      placement:
        constraints:
          - node.role == manager

  # ----------------------------------------------------------------------
  # PEcAn application
  # ----------------------------------------------------------------------

  # PEcAn documentation as well as PEcAn home page
  docs:
    image: 172.20.234.6:5000/pecan/docs:${PECAN_VERSION:-latest}
    restart: unless-stopped
    networks:
      - pecan
    labels:
      - "traefik.enable=true"
      - "traefik.frontend.rule=${TRAEFIK_FRONTEND_RULE:-}PathPrefix:/"
      - "traefik.backend=docs"
    deploy:
      placement:
        constraints:
          - node.role == manager

  # PEcAn web front end, this is just the PHP code
  web:
    image: 172.20.234.6:5000/pecan/web:${PECAN_VERSION:-latest}
    restart: unless-stopped
    networks:
      - pecan
    environment:
      - RABBITMQ_URI=${RABBITMQ_URI:-amqp://guest:guest@rabbitmq/%2F}
      - FQDN=${PECAN_FQDN:-docker}
      - NAME=${PECAN_NAME:-docker}
    depends_on:
       - postgres
       - rabbitmq
    labels:
      - "traefik.enable=true"
      - "traefik.frontend.rule=${TRAEFIK_FRONTEND_RULE:-}PathPrefix:/pecan/"
      - "traefik.backend=pecan"
    volumes:
      - type: volume
        source: pecan
        target: /var/www/html/pecan/data
        volume:
          nocopy: true
      - type: volume
        source: pecan
        target: /data
        volume:
          nocopy: true
    deploy:
      placement:
        constraints:
          - node.role == manager

  # PEcAn model monitor
  monitor:
    image: 172.20.234.6:5000/pecan/monitor:${PECAN_VERSION:-latest}
    restart: unless-stopped
    networks:
      - pecan
    ports:
      - 9999:9999
    environment:
      - RABBITMQ_URI=${RABBITMQ_URI:-amqp://guest:guest@rabbitmq/%2F}
      - FQDN=${PECAN_FQDN:-docker}
    depends_on:
       - rabbitmq
    labels:
      - "traefik.enable=true"
      - "traefik.frontend.rule=${TRAEFIK_FRONTEND_RULE:-}PathPrefixStrip:/monitor/"
      - "traefik.backend=monitor"
    volumes:
      - type: volume
        source: pecan
        target: /data
        volume:
          nocopy: true
    deploy:
      placement:
        constraints:
          - node.role == manager

  # PEcAn executor, executes jobs. Does not the actual models
  executor:
    image: 172.20.234.6:5000/pecan/executor:${PECAN_VERSION:-latest}
    restart: unless-stopped
    networks:
      - pecan
    environment:
      - RABBITMQ_URI=${RABBITMQ_URI:-amqp://guest:guest@rabbitmq/%2F}
      - FQDN=${PECAN_FQDN:-docker}
    depends_on:
       - postgres
       - rabbitmq
    volumes:
      - type: volume
        source: pecan
        target: /data
        volume:
          nocopy: true
    deploy:
      placement:
        constraints:
          - node.role == manager

  # ----------------------------------------------------------------------
  # PEcAn models, list each model you want to run below
  # ----------------------------------------------------------------------

  # PEcAn sipnet model runner
  sipnet:
    image: 172.20.234.6:5000/pecan/model-sipnet-136:${PECAN_VERSION:-latest}
    restart: unless-stopped
    networks:
      - pecan
    environment:
      - RABBITMQ_URI=${RABBITMQ_URI:-amqp://guest:guest@rabbitmq/%2F}
    depends_on:
       - rabbitmq
    volumes:
      - type: volume
        source: pecan
        target: /data
        volume:
          nocopy: true

  # PEcAn ED model runner
  ed2:
    image: 172.20.234.6:5000/pecan/model-ed2-git:${PECAN_VERSION:-latest}
    restart: unless-stopped
    networks:
      - pecan
    environment:
      - RABBITMQ_URI=${RABBITMQ_URI:-amqp://guest:guest@rabbitmq/%2F}
    depends_on:
       - rabbitmq
    volumes:
      - type: volume
        source: pecan
        target: /data
        volume:
          nocopy: true

  # PEcAn MAESPA model runner
  maespa:
    image: 172.20.234.6:5000/pecan/model-maespa-git:${PECAN_VERSION:-latest}
    restart: unless-stopped
    networks:
      - pecan
    environment:
      - RABBITMQ_URI=${RABBITMQ_URI:-amqp://guest:guest@rabbitmq/%2F}
    depends_on:
       - rabbitmq
    volumes:
      - type: volume
        source: pecan
        target: /data
        volume:
          nocopy: true

# ----------------------------------------------------------------------
# Name of network to be used by all containers
# ----------------------------------------------------------------------
networks:
  pecan:
    ipam:
      config:
        - subnet: 10.17.2.0/24

# ----------------------------------------------------------------------
# Volumes used by the PEcAn stack. These volumes are used to make sure
# we have persistent data. You can use add the commented section to your
# docker-compose.override.yml to have the docker volumes placed at a
# specific location.
# ----------------------------------------------------------------------
volumes:
  traefik:
    # driver_opts:
    #   type: none
    #   device: ${DATA_DIR:-/tmp}/traefik
    #   o: bind
  postgres:
    # driver_opts:
    #   type: none
    #   device: ${DATA_DIR:-/tmp}/postgres
    #   o: bind
  rabbitmq:
    # driver_opts:
    #   type: none
    #   device: ${DATA_DIR:-/tmp}/rabbitmq
    #   o: bind
  pecan:
    driver_opts:
      type: "nfs"
      o: "addr=172.20.234.6,rw,nolock,soft"
      device: ":/public/shared-docker-volumes/pecan_data"
  portainer:
    # driver_opts:
    #   type: none
    #   device: ${DATA_DIR:-/tmp}/portainer
    #   o: bind
